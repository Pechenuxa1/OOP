/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.vtatarintsev.threads;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import org.junit.jupiter.api.Test;

class SearchNonPrimeNumberTest {

  @Test
  void bigPrimeNumbersArrayTest() throws InterruptedException, ExecutionException {
    ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(6997901, 6997927, 6997937,
        6997967, 6998009, 6998029, 6998039, 6998051, 6998053));

    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    assertFalse(singleThreadedComputation.isNonPrimeNumber(arrayList));

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(2);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    multiThreadedComputation.end();
    assertFalse(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(2);
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    service.shutdown();
    assertFalse(nonPrime);

    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertFalse(parallelStreamComputation.isNonPrimeNumber(arrayList));
  }

  @Test
  void nonPrimeNumberAtTheEndTest() throws ExecutionException, InterruptedException {
    ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(6997901, 6997927, 6997937,
        6997967, 6998009, 6998029, 6998039, 6998051, 6998053, 4));

    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    assertTrue(singleThreadedComputation.isNonPrimeNumber(arrayList));

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(2);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    multiThreadedComputation.end();
    assertTrue(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(2);
    nonPrime = false;
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    assertTrue(nonPrime);

    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertTrue(parallelStreamComputation.isNonPrimeNumber(arrayList));
  }

  @Test
  void nonPrimeNumbersTest() throws ExecutionException, InterruptedException {
    ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(4, 6, 8));

    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    assertTrue(singleThreadedComputation.isNonPrimeNumber(arrayList));

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(2);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    multiThreadedComputation.end();
    assertTrue(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(2);
    nonPrime = false;
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    assertTrue(nonPrime);

    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertTrue(parallelStreamComputation.isNonPrimeNumber(arrayList));
  }
}
