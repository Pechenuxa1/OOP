/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.vtatarintsev.threads;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import org.junit.jupiter.api.Test;

class SearchNonPrimeNumberTest {

  @Test
  void bigPrimeNumbersArrayTest() throws InterruptedException, ExecutionException {
    ArrayList<Integer> arrayList = new ArrayList<>(
        Arrays.asList(10000019, 10000079, 10000103, 10000121, 10000139, 10000141, 10000169,
            10000189, 10000223, 10000229, 10000247, 10000253, 10000261, 10000271, 10000303,
            10000339, 10000349, 10000357, 10000363, 10000379, 10000439, 10000451, 10000453,
            10000457, 10000481, 10000511, 10000537, 10000583, 10000591, 10000609, 10000643,
            10000651, 10000657, 10000667, 10000687, 10000691, 10000721, 10000723, 10000733,
            10000741, 10000747, 10000759, 10000763, 10000769, 10000789, 10000799, 10000813,
            10000819, 10000831, 10000849, 10000867, 10000871, 10000873, 10000877, 10000891,
            10000931, 10000943, 10000961, 10000967, 10000987, 10000993, 10001009, 10001053,
            10001081, 10001093, 10001107, 10001119, 10001203, 10001207, 10001209, 10001213,
            10001221, 10001227, 10001231, 10001237, 10001261, 10001269, 10001281, 10001311,
            10001347, 10001357, 10001363, 10001399, 10001401, 10001419, 10001441, 10001443,
            10001461, 10001473, 10001483, 10001501, 10001521, 10001531, 10001533, 10001567,
            10001569, 10001587, 10001603, 10001617, 10001659, 10001687, 10001701, 10001707,
            10001713, 10001759, 10001777, 10001779, 10001791, 10001801, 10001807, 10001813,
            10001819, 10001821, 10001833, 10001837, 10001861, 10001881, 10001891, 10001903,
            10001921, 10001963, 10002007, 10002017, 10002019, 10002029, 10002053, 10002059,
            10002061, 10002067, 10002077, 10002121, 10002127, 10002133, 10002149, 10002191,
            10002197, 10002199, 10002203, 10002257, 10002259, 10002277, 10002283, 10002287,
            10002323, 10002331, 10002347, 10002397, 10002403, 10002407, 10002431, 10002437,
            10002439, 10002449, 10002463, 10002481, 10002521, 10002527, 10002529, 10002547,
            10002563, 10002571, 10002589, 10002599, 10002623, 10002649, 10002653, 10002659,
            10002661, 10002667, 10002731, 10002761, 10002763, 10002779, 10002791, 10002803,
            10002809, 10002823, 10002829, 10002833, 10002847, 10002859, 10002871, 10002887,
            10002929, 10002943, 10002959, 10002983, 10003001, 10003003, 10003027, 10003031,
            10003043, 10003073, 10003087, 10003121, 10003127, 10003159, 10003181, 10003193,
            10003199, 10003223, 10003237, 10003247, 10003277, 10003337, 10003351, 10003363,
            10003369, 10003373, 10003417, 10003439, 10003457, 10003471, 10003489, 10003501,
            10003517, 10003529, 10003541, 10003559, 10003561, 10003571, 10003583, 10003601,
            10003613, 10003639, 10003657, 10003673, 10003681, 10003699, 10003717, 10003723,
            10003729, 10003733, 10003739, 10003757, 10003759, 10003783, 10003787, 10003831,
            10003859, 10003879, 10003891, 10003897, 10003943, 10003951, 10003957, 10003999,
            10004017, 10004039, 10004047, 10004063, 10004119, 10004147, 10004153, 10004191,
            10004201, 10004207, 10004231, 10004243, 10004261, 10004263, 10004273, 10004297,
            10004299, 10004303, 10004311, 10004329, 10004341, 10004377, 10004383, 10004387,
            10004399, 10004411, 10004447, 10004459, 10004461, 10004479, 10004497, 10004513,
            10004521, 10004543, 10004557, 10004573, 10004597, 10004611, 10004627, 10004629,
            10004647, 10004663, 10004669, 10004693, 10004707, 10004719, 10004801, 10004809,
            10004831, 10004833, 10004851, 10004879, 10004881, 10004921, 10004923, 10004941,
            10004947, 10004983));
    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    Instant start = Instant.now();
    assertFalse(singleThreadedComputation.isNonPrimeNumber(arrayList));
    Instant finish = Instant.now();
    System.out.println("SingleThreadedComputation: " + Duration.between(start, finish).toMillis());

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(8);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    start = Instant.now();
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    finish = Instant.now();
    System.out.println("MultiThreadedComputation: " + Duration.between(start, finish).toMillis());
    multiThreadedComputation.end();
    assertFalse(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(4);
    start = Instant.now();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
;        nonPrime = true;
        break;
      }
    }
    service.shutdown();
    assertFalse(nonPrime);
    finish = Instant.now();
    System.out.println("ThreadPoolComputation: " + Duration.between(start, finish).toMillis());

    start = Instant.now();
    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertFalse(parallelStreamComputation.isNonPrimeNumber(arrayList));
    finish = Instant.now();
    System.out.println("ParallelStreamComputation: " + Duration.between(start, finish).toMillis());
  }

  @Test
  void nonPrimeNumberAtTheEndTest() throws ExecutionException, InterruptedException {
    ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(6997901, 6997927, 6997937,
        6997967, 6998009, 6998029, 6998039, 6998051, 6998053, 4));

    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    assertTrue(singleThreadedComputation.isNonPrimeNumber(arrayList));

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(2);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    multiThreadedComputation.end();
    assertTrue(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(2);
    nonPrime = false;
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    assertTrue(nonPrime);

    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertTrue(parallelStreamComputation.isNonPrimeNumber(arrayList));
  }

  @Test
  void nonPrimeNumbersTest() throws ExecutionException, InterruptedException {
    ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(4, 6, 8));

    SingleThreadedComputation singleThreadedComputation = new SingleThreadedComputation();
    assertTrue(singleThreadedComputation.isNonPrimeNumber(arrayList));

    MultiThreadedComputation multiThreadedComputation = new MultiThreadedComputation(2);
    boolean nonPrime = false;
    ArrayList<FutureTask<Boolean>> futureTasks = new ArrayList<>();
    for (Integer number : arrayList) {
      futureTasks.add(new FutureTask<>(() -> !PrimeNumberChecker.isPrime(number)));
    }
    multiThreadedComputation.start();
    for (FutureTask<Boolean> futureTask : futureTasks) {
      multiThreadedComputation.execute(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    multiThreadedComputation.end();
    assertTrue(nonPrime);

    ExecutorService service = Executors.newFixedThreadPool(2);
    nonPrime = false;
    for (FutureTask<Boolean> futureTask : futureTasks) {
      service.submit(futureTask);
    }
    for (FutureTask<Boolean> futureTask : futureTasks) {
      if (futureTask.get()) {
        nonPrime = true;
        break;
      }
    }
    assertTrue(nonPrime);

    ParallelStreamComputation parallelStreamComputation = new ParallelStreamComputation();
    assertTrue(parallelStreamComputation.isNonPrimeNumber(arrayList));
  }
}
