/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.vtatarintsev.snake;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableNumberValue;
import javafx.beans.value.ObservableValue;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Bounds;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.Slider;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.util.StringConverter;
import org.checkerframework.checker.units.qual.C;

public class Main extends Application {

  private static double WIDTH = 600;
  private static double HEIGHT = WIDTH;
  private static int ROWS = 20;
  private static int COLUMNS = ROWS;
  private static double SQUARE_SIZE = WIDTH / COLUMNS;

  private static final int RIGHT = 0;
  private static final int LEFT = 1;
  private static final int UP = 2;
  private static final int DOWN = 3;

  private GraphicsContext gc;
  private final List<Point> snakeBody = new ArrayList<>();
  private Point snakeHead;
  private int foodX;
  private int foodY;
  private Circle food;
  private boolean gameOver;
  private int currentDirection;
  private int score = 0;
  StackPane root = new StackPane();
  Scene scene;
  VBox menuBox;
  int easy;
  int hard;
  private final Canvas canvas = new Canvas(WIDTH, HEIGHT);
  private final Timeline timeline = new Timeline();
  private boolean turn;
  StackPane pane = new StackPane();
  Button backToMainMenu = new Button("Back To The Main Menu");
  KeyFrame keyFrame;
  boolean pause = false;
  Pane canvasPane = new Pane();

  @Override
  public void start(Stage primaryStage) {
    primaryStage.setTitle("Snake");
    VBox menu = new VBox();
    menu.setAlignment(Pos.CENTER);
    Button start = new Button("Start");
    start.setPrefSize(100, 20);
    Button settings = new Button("Settings");
    settings.setPrefSize(100, 20);
    Button exit = new Button("Exit");
    exit.setPrefSize(100, 20);
    menu.getChildren().addAll(start, settings, exit);
    //root.setCenter(menu);
    root.getChildren().add(menu);
    scene = new Scene(root, WIDTH, HEIGHT);

    pane.getChildren().add(backToMainMenu);
    pane.setLayoutX(WIDTH / 2.8);
    pane.setLayoutY(HEIGHT / 1.9);
    backToMainMenu.setOnAction(event -> {
      root.getChildren().removeAll(canvas, pane);
      root.getChildren().add(menu);
      timeline.stop();
      timeline.getKeyFrames().remove(keyFrame);
      pause = false;
    });

    ChangeListener<Number> resizeListener = (observable, oldValue, newValue) -> {
      //double newWidth = root.getWidth();
      //double newHeight = root.getHeight();

      double scaleX = scene.getWidth() / canvas.getWidth();
      double scaleY = scene.getHeight() / canvas.getHeight();

      double minScale = Math.min(scaleX, scaleY);
      canvas.setScaleX(minScale);
      canvas.setScaleY(minScale);
      StackPane.setAlignment(canvas, Pos.CENTER);
      //double translateX = (rootBounds.getWidth() - canvas.getWidth() * minScale) / 2;
      //double translateY = (rootBounds.getHeight() - canvas.getHeight() * minScale) / 2;
      //canvas.setTranslateX(translateX);
      //canvas.setTranslateY(translateY);

      //canvas.setScaleX(scaleX);
      //canvas.setScaleY(scaleY);
      //canvas.setTranslateX((root.getWidth() - canvas.getWidth() * minScale) / 2);
      //canvas.setTranslateY((root.getHeight() - canvas.getHeight() * minScale) / 2);


      //canvas.setWidth(newWidth);
      //canvas.setHeight(newHeight);
      //WIDTH = (int) newWidth;
      //HEIGHT = (int) newHeight;
      //SQUARE_SIZE = WIDTH / COLUMNS;
    };

    scene.widthProperty().addListener(resizeListener);
    scene.heightProperty().addListener(resizeListener);

    /*scene.widthProperty().addListener((observable, oldValue, newValue) -> {
      canvas.setScaleX(scene.getWidth() / root.getWidth());
    });
    scene.heightProperty().addListener((observable, oldValue, newValue) -> {
      canvas.setScaleY(scene.getHeight() / root.getHeight());
    });*/

    gc = canvas.getGraphicsContext2D();
    scene.setOnKeyPressed(event -> {
      KeyCode code = event.getCode();
      if (code == KeyCode.RIGHT || code == KeyCode.D) {
        if (currentDirection != LEFT && turn) {
          currentDirection = RIGHT;
          turn = false;
        }
      } else if (code == KeyCode.LEFT || code == KeyCode.A) {
        if (currentDirection != RIGHT && turn) {
          currentDirection = LEFT;
          turn = false;
        }
      } else if (code == KeyCode.UP || code == KeyCode.W) {
        if (currentDirection != DOWN && turn) {
          currentDirection = UP;
          turn = false;
        }
      } else if (code == KeyCode.DOWN || code == KeyCode.S) {
        if (currentDirection != UP && turn) {
          currentDirection = DOWN;
          turn = false;
        }
      } else if (code == KeyCode.ESCAPE && !pause) {
        timeline.pause();
        root.getChildren().add(pane);
        StackPane.setAlignment(backToMainMenu, Pos.CENTER);
        StackPane.setAlignment(pane, Pos.CENTER);
        pause = true;
      } else if (code == KeyCode.ESCAPE && pause) {
        root.getChildren().remove(pane);
        timeline.play();
        pause = false;
      }
    });

    Text gameDifficulty = new Text("Game Difficulty");
    Slider slider = new Slider(1, 3, 1);

    Text fieldSize = new Text("Field Size");
    Slider field = new Slider(1, 3, 1);

    primaryStage.setScene(scene);
    primaryStage.show();
    start.setOnAction(event -> {
      score = 0;
      currentDirection = RIGHT;
      snakeBody.clear();
      gc.clearRect(0, 0, WIDTH, HEIGHT);
      root.getChildren().remove(menu);
      //root.setCenter(canvas);
      root.getChildren().add(canvas);
      StackPane.setAlignment(canvas, Pos.CENTER);
      //scene.setRoot(canvas.getParent());
      int time = 300;
      if (slider.getValue() == 1d) {
        time = 300;
      } else if (slider.getValue() == 2d) {
        time = 200;
      } else if (slider.getValue() == 3d) {
        time = 100;
      }

      if (field.getValue() == 1d) {
        ROWS = 10;
        COLUMNS = 10;
      } else if (field.getValue() == 2d) {
        ROWS = 20;
        COLUMNS = 20;
      } else if (field.getValue() == 3d) {
        ROWS = 30;
        COLUMNS = 30;
      }
      SQUARE_SIZE = WIDTH / COLUMNS;
      int x = 5;
      for (int i = 0; i < 3; i++) {
        snakeBody.add(new Point(x, ROWS / 2));
        x -= 1;
      }
      snakeHead = snakeBody.get(0);
      generateFood(gc);
      keyFrame = new KeyFrame(Duration.millis(time), e -> run(gc));
      timeline.getKeyFrames().add(keyFrame);
      timeline.setCycleCount(Animation.INDEFINITE);
      timeline.play();
      //startGame(primaryStage);
    });

    Button back = new Button("Back");
    VBox settingsMenu = new VBox();
    slider.setMinorTickCount(0);
    slider.setMajorTickUnit(1);
    slider.setSnapToTicks(true);
    slider.setShowTickMarks(true);
    slider.setShowTickLabels(true);
    slider.setPrefWidth(200);
    slider.setMaxWidth(200);
    slider.setMinWidth(200);
    slider.setLabelFormatter(new StringConverter<>() {
      @Override
      public String toString(Double object) {
        if (object == 1d) {
          return "Easy";
        } else if (object == 2d) {
          return "Medium";
        } else if (object == 3d) {
          return "Hard";
        }
        return "Hard";
      }

      @Override
      public Double fromString(String string) {
        return switch (string) {
          case "Easy" -> 1d;
          case "Medium" -> 2d;
          default -> 3d;
        };
      }
    });


    field.setMinorTickCount(0);
    field.setMajorTickUnit(1);
    field.setSnapToTicks(true);
    field.setShowTickMarks(true);
    field.setShowTickLabels(true);
    field.setPrefWidth(200);
    field.setMaxWidth(200);
    field.setMinWidth(200);
    field.setLabelFormatter(new StringConverter<>() {
      @Override
      public String toString(Double object) {
        if (object == 1d) {
          return "10x10";
        } else if (object == 2d) {
          return "20x20";
        } else if (object == 3d) {
          return "30x30";
        }
        return "30x30";
      }

      @Override
      public Double fromString(String string) {
        return switch (string) {
          case "10x10" -> 1d;
          case "20x20" -> 2d;
          default -> 3d;
        };
      }
    });

    settingsMenu.getChildren().addAll(gameDifficulty, slider, fieldSize, field, back);
    settingsMenu.setAlignment(Pos.CENTER);
    settings.setOnAction(event -> {
      root.getChildren().remove(menu);
      //root.setCenter(settingsMenu);
      root.getChildren().add(settingsMenu);
    });

    back.setOnAction(event -> {
      root.getChildren().remove(settingsMenu);
      //root.setCenter(menu);
      root.getChildren().add(menu);
    });

    exit.setOnAction(event -> {
      Platform.exit();
    });
  }


  private void run(GraphicsContext gc) {
    turn = true;
    if (gameOver) {
      gc.setFill(Color.RED);
      gc.setFont(new Font("Digital-7", 70));
      gc.fillText("Game Over", WIDTH / 5.0, HEIGHT / 2.3);

      root.getChildren().add(pane);
      timeline.stop();
      timeline.getKeyFrames().remove(keyFrame);
      gameOver = false;
      return;
    }
    drawBackground(gc);
    drawFood();
    drawSnake(gc);
    drawScore();
    for (int i = snakeBody.size() - 1; i >= 1; i--) {
      snakeBody.get(i).x = snakeBody.get(i - 1).x;
      snakeBody.get(i).y = snakeBody.get(i - 1).y;
    }

    switch (currentDirection) {
      case RIGHT -> moveRight();
      case LEFT -> moveLeft();
      case UP -> moveUp();
      case DOWN -> moveDown();
    }
    gameOver();
    eatFood();
  }

  private void drawBackground(GraphicsContext gc) {
    for (int i = 0; i < COLUMNS; i++) {
      for (int j = 0; j < ROWS; j++) {
        if ((i + j) % 2 == 0) {
          gc.setFill(Color.rgb(170, 215, 81));
        } else {
          gc.setFill(Color.rgb(162, 209, 73));
        }
        gc.fillRect(i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
      }
    }
  }

  private void generateFood(GraphicsContext gc) {
    start:
    while (true) {
      foodX = (int) (Math.random() * ROWS);
      foodY = (int) (Math.random() * COLUMNS);
      for (Point snake : snakeBody) {
        if (snake.getX() == foodX && snake.getY() == foodY) {
          continue start;
        }
      }
      //food = new Circle(foodX * SQUARE_SIZE + (SQUARE_SIZE / 2),
      //  foodY * SQUARE_SIZE + (SQUARE_SIZE / 2), SQUARE_SIZE / 2 - 1,
      //Color.rgb(242, 242, 37));

      //gc.setFill(Color.rgb(242, 242, 37));
      //gc.fillRoundRect(foodX * SQUARE_SIZE, foodY * SQUARE_SIZE, SQUARE_SIZE - 1, SQUARE_SIZE - 1,
      //  35, 35);
      break;
    }
  }

  private void drawFood() {
    gc.setFill(Color.rgb(242, 242, 37));
    gc.fillRoundRect(foodX * SQUARE_SIZE, foodY * SQUARE_SIZE, SQUARE_SIZE - 1, SQUARE_SIZE - 1,
        35, 35);
    //root.getChildren().add(food);
  }

  private void drawSnake(GraphicsContext gc) {
    gc.setFill(Color.rgb(200, 30, 30));
    gc.fillRoundRect(snakeHead.getX() * SQUARE_SIZE, snakeHead.getY() * SQUARE_SIZE,
        SQUARE_SIZE - 1, SQUARE_SIZE - 1, 20, 20);
    gc.setFill(Color.rgb(30, 30, 200));
    for (int i = 1; i < snakeBody.size(); i++) {
      gc.fillRoundRect(snakeBody.get(i).getX() * SQUARE_SIZE, snakeBody.get(i).getY() * SQUARE_SIZE,
          SQUARE_SIZE - 1, SQUARE_SIZE - 1, 20, 20);
    }
  }

  private void moveRight() {
    snakeHead.x++;
  }

  private void moveLeft() {
    snakeHead.x--;
  }

  private void moveUp() {
    snakeHead.y--;
  }

  private void moveDown() {
    snakeHead.y++;
  }

  private void gameOver() {
    if (snakeHead.x < 0 || snakeHead.y < 0 || snakeHead.x * SQUARE_SIZE >= WIDTH
        || snakeHead.y * SQUARE_SIZE >= HEIGHT) {
      gameOver = true;
    }
    for (int i = 1; i < snakeBody.size(); i++) {
      if (snakeHead.getX() == snakeBody.get(i).getX() && snakeHead.getY() == snakeBody.get(i).getY()) {
        gameOver = true;
        break;
      }
    }
  }

  private void eatFood() {
    if (snakeHead.getX() == foodX && snakeHead.getY() == foodY) {
      snakeBody.add(new Point(-1, -1));
      generateFood(gc);
      score += 5;
    }
  }

  private void drawScore() {
    gc.setFill(Color.WHITE);
    gc.setFont(new Font("Digital-7", 25));
    gc.fillText("Score: " + score, 10, 35);
  }
}
