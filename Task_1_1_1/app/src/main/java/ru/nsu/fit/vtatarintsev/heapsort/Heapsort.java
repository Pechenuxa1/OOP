/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.fit.vtatarintsev.heapsort;

/**
 * Heapsort class is needed to sort arrays.
 */
public class Heapsort {

  public static int i;
  public static int v1;
  public static int v2;
  public static int n;

  /**
   * Main method.
   *
   * @param array is array to sort.
   */
  public static void sort(int[] array) {
    for (i = 0; i < array.length; i++) {
      v1 = i;
      v2 = (i - 1) / 2;
      siftUp(array);
    }
    n = array.length;
    while (n > 1) {
      v1 = 0;
      v2 = n - 1;
      Utils.swap(array);
      n -= 1;
      siftDown(array);
    }

  }

  /**
   * siftDown finds the largest element starting from the root.
   *
   * @param heap is array.
   */
  private static void siftDown(int[] heap) {
    if (((v1 * 2) + 2) < n) {
      if ((heap[v1] < heap[(v1 * 2) + 1]) || (heap[v1] < heap[(v1 * 2) + 2])) {
        if (heap[(v1 * 2) + 1] >= heap[(v1 * 2) + 2]) {
          v2 = (v1 * 2) + 1;
          Utils.swap(heap);
          v1 = v2;
          siftDown(heap);
        } else if (heap[(v1 * 2) + 1] < heap[(v1 * 2) + 2]) {
          v2 = (v1 * 2) + 2;
          Utils.swap(heap);
          v1 = v2;
          siftDown(heap);
        }
      }
    } else if (((v1 * 2) + 2) == n) {
      if ((heap[v1] < heap[(v1 * 2) + 1])) {
        v2 = (v1 * 2) + 1;
        Utils.swap(heap);
        v1 = v2;
        siftDown(heap);
      }
    }
  }

  /**
   * siftUp puts the largest element of the array at the root.
   *
   * @param heap is array.
   */
  private static void siftUp(int[] heap) {
    if (heap[v1] > heap[v2] && v1 != 0) {
      Utils.swap(heap);
      v1 = v2;
      v2 = (v2 - 1) / 2;
      siftUp(heap);
    }
  }
}
